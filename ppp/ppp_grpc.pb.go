// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ppp

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PaymentProviderClient is the client API for PaymentProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentProviderClient interface {
	GetManifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Manifest, error)
}

type paymentProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentProviderClient(cc grpc.ClientConnInterface) PaymentProviderClient {
	return &paymentProviderClient{cc}
}

func (c *paymentProviderClient) GetManifest(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Manifest, error) {
	out := new(Manifest)
	err := c.cc.Invoke(ctx, "/ppp.PaymentProvider/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentProviderServer is the server API for PaymentProvider service.
// All implementations must embed UnimplementedPaymentProviderServer
// for forward compatibility
type PaymentProviderServer interface {
	GetManifest(context.Context, *empty.Empty) (*Manifest, error)
	mustEmbedUnimplementedPaymentProviderServer()
}

// UnimplementedPaymentProviderServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentProviderServer struct {
}

func (UnimplementedPaymentProviderServer) GetManifest(context.Context, *empty.Empty) (*Manifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedPaymentProviderServer) mustEmbedUnimplementedPaymentProviderServer() {}

// UnsafePaymentProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentProviderServer will
// result in compilation errors.
type UnsafePaymentProviderServer interface {
	mustEmbedUnimplementedPaymentProviderServer()
}

func RegisterPaymentProviderServer(s grpc.ServiceRegistrar, srv PaymentProviderServer) {
	s.RegisterService(&_PaymentProvider_serviceDesc, srv)
}

func _PaymentProvider_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentProviderServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppp.PaymentProvider/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentProviderServer).GetManifest(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ppp.PaymentProvider",
	HandlerType: (*PaymentProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _PaymentProvider_GetManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ppp/ppp.proto",
}
